/*!
 * @package @coolgk/mongo
 * @version 1.0.15
 * @link https://coolgk.github.io/mongodb-orm.html
 * @license MIT
 * @author Daniel Gong <daniel.k.gong@gmail.com>
 */

/*!
 *  Copyright (c) 2017 Daniel Gong <daniel.k.gong@gmail.com>. All rights reserved.
 *  Licensed under the MIT License.
 */
import { Db, ObjectID, Cursor, Collection, FindOneOptions, CollectionInsertOneOptions, CollectionInsertManyOptions, InsertOneWriteOpResult, InsertWriteOpResult, FindOneAndReplaceOption } from 'mongodb';
export { InsertOneWriteOpResult, InsertWriteOpResult };
export declare enum GeneratedField {
    DATE_MODIFIED = "_dateModified"
}
export declare enum DataType {
    STRING = "string",
    BOOLEAN = "bool",
    DATE = "date",
    NUMBER = "number",
    DOCUMENT = "document",
    ENUM = "enum",
    OBJECTID = "objectId"
}
export interface IDataSchema {
    type: DataType;
    model?: typeof Mongo;
    schema?: ISchema;
    array?: boolean;
    setter?: (value: any, row: any) => any;
    default?: any;
    enum?: any[];
    required?: boolean;
    maxLength?: number;
    minLength?: number;
    minimum?: number | Date;
    maximum?: number | Date;
    maxItems?: number;
    minItems?: number;
    uniqueItems?: boolean;
    pattern?: string;
}
export interface ISchema {
    [field: string]: IDataSchema;
}
export interface IDocument {
    [field: string]: any;
}
export interface IProjection {
    [field: string]: 1 | 0;
}
export interface IJoin {
    on: string | string[];
    projection?: IProjection;
    filters?: IQuery;
    join?: IJoin[];
    data?: Cursor;
    model?: typeof Mongo;
}
export interface IQuery {
    [index: string]: any;
}
export interface IFindOptions extends FindOneOptions {
    join?: IJoin[];
    cursor?: boolean;
}
export interface IOptions {
    db: Db;
}
export interface IUpdateResults {
    value?: {
        [field: string]: any;
    };
    raw: {
        [action: string]: any;
    };
}
export interface IUpdateOption extends FindOneAndReplaceOption {
    revertOnError?: boolean;
}
export declare class MongoError extends Error {
    data: any;
}
export declare class SchemaError extends Error {
}
export declare class Mongo {
    static getCollectionName(): string;
    static getSchema(): ISchema;
    private _schema;
    private _collection;
    private _db;
    constructor(options: IOptions);
    getObjectID(id: ObjectID | string): ObjectID | undefined;
    getObjectId(id: ObjectID | string): ObjectID | undefined;
    getDb(): Db;
    getCollection(): Collection;
    setDbValidationSchema(): Promise<any>;
    insertOne(data: IDocument, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult>;
    insertMany(data: IDocument[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult>;
    updateOne(data: IDocument, options?: IUpdateOption): Promise<IUpdateResults>;
    find(query: IQuery, options?: IFindOptions): Promise<Cursor | IDocument[]>;
    attachObjectIdData(data: Cursor | IDocument[], joins: IJoin[]): Promise<Cursor | IDocument[]>;
    private _attachDataToReferencePointer;
    private _findObjectIdInData;
    private _getJoinQuery;
    private _findObjectIdFieldModel;
    private _getJsonSchema;
    private _transform;
    private _setTransformedValue;
    private _getUpdateQuery;
    private _setUpdateQuery;
}
export default Mongo;
